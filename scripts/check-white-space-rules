import os
#prevents look behind requires fixed width pattern error
import regex as re
import subprocess
import csv

def check_file(filename):
    with open(filename, 'r') as file:
        content = file.read()

    # Check for spaces after keywords
    keywords = ['if', 'while', 'for', 'switch', 'return']
    for keyword in keywords:
        if re.search(r'\b' + keyword + r'\b[^\s]', content):
            print(f'Keyword "{keyword}" not followed by space in file: {filename}')

    # Check for spaces around assignment operators
    operators = ['=', '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '!=']
    for operator in operators:
        if re.search(r'\b[^s]' + operator + r'\b', content) or re.search(r'\b' + operator + r'\b[^s]', content):
            print(f'Operator "{operator}" not surrounded by spaces in file: {filename}')

    # Check for spaces around binary operators
    operators = ['+', '-', '*', '/', '%', '<', '<=', '>', '>=', '==', '!=', '<<', '>>', '&', '|', '^', '&&', '||']
    for operator in operators:
        if re.search(r'\b[^s]' + operator + r'\b', content) or re.search(r'\b' + operator + r'\b[^s]', content):
            print(f'Operator "{operator}" not surrounded by spaces in file: {filename}')

    # Check for spaces after unary operators
    operators = ['+', '-', '++', '--', '!', '~']
    for operator in operators:
        if re.search(r'\b' + operator + r'\b\s', content):
            print(f'Unary operator "{operator}" followed by space in file: {filename}')

    # Check for spaces around ternary operator
    if re.search(r'\b[^s]?' + r'\b', content) or re.search(r'\b?' + r'\b[^s]', content):
        print(f'Ternary operator "?" not surrounded by spaces in file: {filename}')
    if re.search(r'\b[^s]:' + r'\b', content) or re.search(r'\b:' + r'\b[^s]', content):
        print(f'Ternary operator ":" not surrounded by spaces in file: {filename}')

# Check all .ino, .h, and .cpp files
for filename in glob.glob('**/*.ino', recursive=True):
    check_file(filename)
for filename in glob.glob('**/*.h', recursive=True):
    check_file(filename)
for filename in glob.glob('**/*.cpp', recursive=True):
    check_file(filename)